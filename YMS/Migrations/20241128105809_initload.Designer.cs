// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YMS.Data;

#nullable disable

namespace YMS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241128105809_initload")]
    partial class initload
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("YMS.Models.AuditTrail", b =>
                {
                    b.Property<int>("AuditID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditID"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CoilID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PerformedByUserID")
                        .HasColumnType("int");

                    b.HasKey("AuditID");

                    b.HasIndex("CoilID");

                    b.HasIndex("PerformedByUserID");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("YMS.Models.Coil", b =>
                {
                    b.Property<string>("CoilID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CoilBarcodeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CurrentLocationID")
                        .HasColumnType("int");

                    b.Property<float>("Diameter")
                        .HasColumnType("real");

                    b.Property<DateTime>("LastMoved")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaterialType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("CoilID");

                    b.ToTable("Coils");
                });

            modelBuilder.Entity("YMS.Models.CoilMovement", b =>
                {
                    b.Property<int>("MovementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovementID"));

                    b.Property<string>("CoilID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FromPlaceHolderID")
                        .HasColumnType("int");

                    b.Property<int>("MovedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToPlaceHolderID")
                        .HasColumnType("int");

                    b.HasKey("MovementID");

                    b.HasIndex("CoilID");

                    b.HasIndex("FromPlaceHolderID");

                    b.HasIndex("MovedByUserID");

                    b.HasIndex("ToPlaceHolderID");

                    b.ToTable("CoilMovements");
                });

            modelBuilder.Entity("YMS.Models.Inspection", b =>
                {
                    b.Property<int>("InspectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InspectionID"));

                    b.Property<string>("CoilID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Diameter")
                        .HasColumnType("real");

                    b.Property<string>("ImagePaths")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InspectorID")
                        .HasColumnType("int");

                    b.Property<string>("Remark1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisualCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("InspectionID");

                    b.HasIndex("CoilID");

                    b.HasIndex("InspectorID");

                    b.ToTable("Inspections");
                });

            modelBuilder.Entity("YMS.Models.OutgoingDispatch", b =>
                {
                    b.Property<int>("DispatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DispatchID"));

                    b.Property<string>("CoilID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DispatchedByUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DispatchedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransportMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DispatchID");

                    b.HasIndex("CoilID");

                    b.HasIndex("DispatchedByUserID");

                    b.ToTable("OutgoingDispatches");
                });

            modelBuilder.Entity("YMS.Models.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            Description = "Administrator with full access",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleID = 2,
                            Description = "Manager with limited access",
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleID = 3,
                            Description = "Supervisor with operational access",
                            RoleName = "Supervisor"
                        },
                        new
                        {
                            RoleID = 4,
                            Description = "Operator with basic access",
                            RoleName = "Operator"
                        });
                });

            modelBuilder.Entity("YMS.Models.RolePermission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionID"));

                    b.Property<bool>("CanAdd")
                        .HasColumnType("bit");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanView")
                        .HasColumnType("bit");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("PermissionID");

                    b.HasIndex("RoleID");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("YMS.Models.StoragePlaceholder", b =>
                {
                    b.Property<int>("PlaceHolderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaceHolderID"));

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<float>("MaxWeightCapacity")
                        .HasColumnType("real");

                    b.Property<string>("OccupyingCoilID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlaceHolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YardID")
                        .HasColumnType("int");

                    b.HasKey("PlaceHolderID");

                    b.HasIndex("OccupyingCoilID")
                        .IsUnique();

                    b.HasIndex("YardID");

                    b.ToTable("StoragePlaceholders");
                });

            modelBuilder.Entity("YMS.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("Shift")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("YMS.Models.Yard", b =>
                {
                    b.Property<int>("YardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YardID"));

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("CurrentOccupancy")
                        .HasColumnType("int");

                    b.Property<string>("YardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("YardID");

                    b.ToTable("Yards");
                });

            modelBuilder.Entity("YMS.Models.AuditTrail", b =>
                {
                    b.HasOne("YMS.Models.Coil", "Coil")
                        .WithMany()
                        .HasForeignKey("CoilID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YMS.Models.User", "PerformedByUser")
                        .WithMany()
                        .HasForeignKey("PerformedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coil");

                    b.Navigation("PerformedByUser");
                });

            modelBuilder.Entity("YMS.Models.CoilMovement", b =>
                {
                    b.HasOne("YMS.Models.Coil", "Coil")
                        .WithMany()
                        .HasForeignKey("CoilID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YMS.Models.StoragePlaceholder", "FromPlaceHolder")
                        .WithMany()
                        .HasForeignKey("FromPlaceHolderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("YMS.Models.User", "MovedByUser")
                        .WithMany()
                        .HasForeignKey("MovedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YMS.Models.StoragePlaceholder", "ToPlaceHolder")
                        .WithMany()
                        .HasForeignKey("ToPlaceHolderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Coil");

                    b.Navigation("FromPlaceHolder");

                    b.Navigation("MovedByUser");

                    b.Navigation("ToPlaceHolder");
                });

            modelBuilder.Entity("YMS.Models.Inspection", b =>
                {
                    b.HasOne("YMS.Models.Coil", "Coil")
                        .WithMany()
                        .HasForeignKey("CoilID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YMS.Models.User", "Inspector")
                        .WithMany()
                        .HasForeignKey("InspectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coil");

                    b.Navigation("Inspector");
                });

            modelBuilder.Entity("YMS.Models.OutgoingDispatch", b =>
                {
                    b.HasOne("YMS.Models.Coil", "Coil")
                        .WithMany()
                        .HasForeignKey("CoilID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YMS.Models.User", "DispatchedByUser")
                        .WithMany()
                        .HasForeignKey("DispatchedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coil");

                    b.Navigation("DispatchedByUser");
                });

            modelBuilder.Entity("YMS.Models.RolePermission", b =>
                {
                    b.HasOne("YMS.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("YMS.Models.StoragePlaceholder", b =>
                {
                    b.HasOne("YMS.Models.Coil", "OccupyingCoil")
                        .WithOne("CurrentLocation")
                        .HasForeignKey("YMS.Models.StoragePlaceholder", "OccupyingCoilID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YMS.Models.Yard", "Yard")
                        .WithMany("StoragePlaceholders")
                        .HasForeignKey("YardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OccupyingCoil");

                    b.Navigation("Yard");
                });

            modelBuilder.Entity("YMS.Models.User", b =>
                {
                    b.HasOne("YMS.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("YMS.Models.Coil", b =>
                {
                    b.Navigation("CurrentLocation")
                        .IsRequired();
                });

            modelBuilder.Entity("YMS.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("YMS.Models.Yard", b =>
                {
                    b.Navigation("StoragePlaceholders");
                });
#pragma warning restore 612, 618
        }
    }
}
